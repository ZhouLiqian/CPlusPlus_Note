// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 56;
	objects = {

/* Begin PBXBuildFile section */
		8E1131EE2A85E78C0091FCD1 /* 汽水瓶.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E17E30D2A6782400095BDBC /* 汽水瓶.cpp */; };
		8E1131EF2A85E78C0091FCD1 /* 明明的随机数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E17E30F2A678FAD0095BDBC /* 明明的随机数.cpp */; };
		8E1131F02A85E78C0091FCD1 /* 进制转换.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E17E3112A67BBB00095BDBC /* 进制转换.cpp */; };
		8E1131F12A85E78C0091FCD1 /* 背包问题.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E1131ED2A85E75B0091FCD1 /* 背包问题.cpp */; };
		8E19E3052AD69D70006C35A8 /* 归并排序算法.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E19E3042AD69D70006C35A8 /* 归并排序算法.cpp */; };
		8E2676552AD68660003EF053 /* 快速排序算法.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E2676542AD68660003EF053 /* 快速排序算法.cpp */; };
		8E2676572AD68C68003EF053 /* 堆排序算法.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E2676562AD68C68003EF053 /* 堆排序算法.cpp */; };
		8E28F1512AD6779D007C2522 /* 字符串转换为整数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E28F1502AD6779D007C2522 /* 字符串转换为整数.cpp */; };
		8E3CFA6B2AB9D299003BA092 /* 用两个栈实现队列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA602AB9D299003BA092 /* 用两个栈实现队列.cpp */; };
		8E3CFA6C2AB9D299003BA092 /* 第一个只出现一次的字符.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA612AB9D299003BA092 /* 第一个只出现一次的字符.cpp */; };
		8E3CFA6D2AB9D299003BA092 /* 调整数组顺序使奇数位于偶数前面.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA622AB9D299003BA092 /* 调整数组顺序使奇数位于偶数前面.cpp */; };
		8E3CFA6E2AB9D299003BA092 /* 0～n-1中缺失的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA632AB9D299003BA092 /* 0～n-1中缺失的数字.cpp */; };
		8E3CFA6F2AB9D299003BA092 /* 队列的最大值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA642AB9D299003BA092 /* 队列的最大值.cpp */; };
		8E3CFA702AB9D299003BA092 /* 矩阵中的路径.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA652AB9D299003BA092 /* 矩阵中的路径.cpp */; };
		8E3CFA712AB9D299003BA092 /* 翻转单词顺序.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA662AB9D299003BA092 /* 翻转单词顺序.cpp */; };
		8E3CFA722AB9D299003BA092 /* 链表中倒数第k个节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA672AB9D299003BA092 /* 链表中倒数第k个节点.cpp */; };
		8E3CFA732AB9D299003BA092 /* 重建二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA682AB9D299003BA092 /* 重建二叉树.cpp */; };
		8E3CFA742AB9D299003BA092 /* 表示数值的字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA692AB9D299003BA092 /* 表示数值的字符串.cpp */; };
		8E3CFA752AB9D299003BA092 /* 顺时针打印矩阵.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA6A2AB9D299003BA092 /* 顺时针打印矩阵.cpp */; };
		8E3CFA762AB9D2AE003BA092 /* 1～n 整数中 1 出现的次数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E7A2A7CD64C006033B5 /* 1～n 整数中 1 出现的次数.cpp */; };
		8E3CFA772AB9D2AE003BA092 /* 剪绳子 II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E752A7C895E006033B5 /* 剪绳子 II.cpp */; };
		8E3CFA782AB9D2AE003BA092 /* 数字序列中某一位的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E7C2A7CD705006033B5 /* 数字序列中某一位的数字.cpp */; };
		8E3CFA792AB9D2AE003BA092 /* 和为s的连续正数序列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E057F922A4BD65700EBA6F9 /* 和为s的连续正数序列.cpp */; };
		8E3CFA7A2AB9D2AE003BA092 /* 数组中出现次数超过一半的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E2D1EF32A5B990A0061F6B7 /* 数组中出现次数超过一半的数字.cpp */; };
		8E3CFA7B2AB9D2AE003BA092 /* 圆圈中最后剩下的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E772A7C99F2006033B5 /* 圆圈中最后剩下的数字.cpp */; };
		8E3CFA7C2AB9D2AE003BA092 /* 构建乘积数组.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E712A7B9D58006033B5 /* 构建乘积数组.cpp */; };
		8E3CFA7D2AB9D2AE003BA092 /* 剪绳子.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E732A7B9D96006033B5 /* 剪绳子.cpp */; };
		8E3CFA7E2AB9D2B4003BA092 /* 不用加减乘除做加法.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E2D1EEF2A5962AA0061F6B7 /* 不用加减乘除做加法.cpp */; };
		8E3CFA7F2AB9D2B4003BA092 /* 数组中数字出现的次数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E6B2A7A64F8006033B5 /* 数组中数字出现的次数.cpp */; };
		8E3CFA802AB9D2B4003BA092 /* 二进制中1的个数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E2D1EF12A5B93700061F6B7 /* 二进制中1的个数.cpp */; };
		8E3CFA812AB9D2B4003BA092 /* 数组中数字出现的次数 II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E6D2A7A650C006033B5 /* 数组中数字出现的次数 II.cpp */; };
		8E3CFA832AB9D393003BA092 /* 把字符串转换成整数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA822AB9D393003BA092 /* 把字符串转换成整数.cpp */; };
		8E3CFA872AB9DC65003BA092 /* 合并两个链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA862AB9DC65003BA092 /* 合并两个链表.cpp */; };
		8E3CFA9E2ABABE68003BA092 /* 把数组排成最小的数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA882ABABE68003BA092 /* 把数组排成最小的数.cpp */; };
		8E3CFA9F2ABABE68003BA092 /* 序列化二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA892ABABE68003BA092 /* 序列化二叉树.cpp */; };
		8E3CFAA02ABABE68003BA092 /* 平衡二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA8A2ABABE68003BA092 /* 平衡二叉树.cpp */; };
		8E3CFAA12ABABE68003BA092 /* 打印从1到最大的n位数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA8B2ABABE68003BA092 /* 打印从1到最大的n位数.cpp */; };
		8E3CFAA22ABABE68003BA092 /* 对称的二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA8C2ABABE68003BA092 /* 对称的二叉树.cpp */; };
		8E3CFAA32ABABE68003BA092 /* 求1+2+…+n.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA8D2ABABE68003BA092 /* 求1+2+…+n.cpp */; };
		8E3CFAA42ABABE68003BA092 /* 替换空格.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA8E2ABABE68003BA092 /* 替换空格.cpp */; };
		8E3CFAA52ABABE68003BA092 /* 滑动窗口的最大值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA8F2ABABE68003BA092 /* 滑动窗口的最大值.cpp */; };
		8E3CFAA62ABABE68003BA092 /* 数值的整数次方.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA902ABABE68003BA092 /* 数值的整数次方.cpp */; };
		8E3CFAA72ABABE68003BA092 /* 在排序数组中查找数字I.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA912ABABE68003BA092 /* 在排序数组中查找数字I.cpp */; };
		8E3CFAA92ABABE68003BA092 /* 栈的压入、弹出序列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA932ABABE68003BA092 /* 栈的压入、弹出序列.cpp */; };
		8E3CFAAA2ABABE68003BA092 /* 复杂链表的复制.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA942ABABE68003BA092 /* 复杂链表的复制.cpp */; };
		8E3CFAAB2ABABE68003BA092 /* 数组中重复的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA952ABABE68003BA092 /* 数组中重复的数字.cpp */; };
		8E3CFAAC2ABABE68003BA092 /* 旋转数组的最小数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA962ABABE68003BA092 /* 旋转数组的最小数字.cpp */; };
		8E3CFAAD2ABABE68003BA092 /* 机器人的运动范围.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA972ABABE68003BA092 /* 机器人的运动范围.cpp */; };
		8E3CFAAE2ABABE68003BA092 /* 数据流中的中位数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA982ABABE68003BA092 /* 数据流中的中位数.cpp */; };
		8E3CFAAF2ABABE68003BA092 /* 左旋转字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA992ABABE68003BA092 /* 左旋转字符串.cpp */; };
		8E3CFAB02ABABE68003BA092 /* 树的子结构.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA9A2ABABE68003BA092 /* 树的子结构.cpp */; };
		8E3CFAB12ABABE68003BA092 /* 字符串的排列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA9B2ABABE68003BA092 /* 字符串的排列.cpp */; };
		8E3CFAB22ABABE68003BA092 /* 数组中的逆序对.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA9C2ABABE68003BA092 /* 数组中的逆序对.cpp */; };
		8E3CFAB32ABABE68003BA092 /* 扑克牌中的顺子.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFA9D2ABABE68003BA092 /* 扑克牌中的顺子.cpp */; };
		8E3CFAB52ABABF13003BA092 /* 二叉树的完全性检验.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E3CFAB42ABABF13003BA092 /* 二叉树的完全性检验.cpp */; };
		8E5F79582AFB82830008549C /* 比较版本号.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E5F79572AFB82830008549C /* 比较版本号.cpp */; };
		8E9258612AE8E3DE003C4FB6 /* 判断数组无重复.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E9258602AE8E3DE003C4FB6 /* 判断数组无重复.cpp */; };
		8EDE25492A8F8C52009DFF23 /* 斐波那契数列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E17E2F42A5E558F0095BDBC /* 斐波那契数列.cpp */; };
		8EDE254A2A8F8C52009DFF23 /* 青蛙跳台阶问题.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E17E2F62A5F9DAC0095BDBC /* 青蛙跳台阶问题.cpp */; };
		8EDE254B2A8F8C52009DFF23 /* 股票的最大利润.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E17E2F82A5FA2D30095BDBC /* 股票的最大利润.cpp */; };
		8EDE254C2A8F8C52009DFF23 /* 连续子数组的最大和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E17E2FA2A60237B0095BDBC /* 连续子数组的最大和.cpp */; };
		8EDE254D2A8F8C52009DFF23 /* 礼物的最大价值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E3B2A77AC0D006033B5 /* 礼物的最大价值.cpp */; };
		8EDE254E2A8F8C52009DFF23 /* 把数字翻译成字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E412A78D90F006033B5 /* 把数字翻译成字符串.cpp */; };
		8EDE254F2A8F8C52009DFF23 /* 最长不含重复字符的子字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E432A78E9D0006033B5 /* 最长不含重复字符的子字符串.cpp */; };
		8EDE25502A8F8C52009DFF23 /* 正则表达式匹配.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E452A790468006033B5 /* 正则表达式匹配.cpp */; };
		8EDE25512A8F8C52009DFF23 /* 丑数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E472A7905B6006033B5 /* 丑数.cpp */; };
		8EDE25522A8F8C52009DFF23 /* n个骰子的点数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8E262E492A790C1C006033B5 /* n个骰子的点数.cpp */; };
		8EDE25542A8F9824009DFF23 /* 小红的日常分享.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE25532A8F9824009DFF23 /* 小红的日常分享.cpp */; };
		8EDE25562A9354D7009DFF23 /* 两个链表的第一个公共节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE25552A9354D7009DFF23 /* 两个链表的第一个公共节点.cpp */; };
		8EDE25582A935D38009DFF23 /* 二叉树的最近公共节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE25572A935D38009DFF23 /* 二叉树的最近公共节点.cpp */; };
		8EDE255A2A95E72F009DFF23 /* 合并两个排序的链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE25592A95E72F009DFF23 /* 合并两个排序的链表.cpp */; };
		8EDE255C2A95F110009DFF23 /* 二叉树的层序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE255B2A95F110009DFF23 /* 二叉树的层序遍历.cpp */; };
		8EDE255E2A9603D5009DFF23 /* 环形链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE255D2A9603D5009DFF23 /* 环形链表.cpp */; };
		8EDE25602A962941009DFF23 /* 最长不含重复字符的子字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE255F2A962941009DFF23 /* 最长不含重复字符的子字符串.cpp */; };
		8EDE25622A963915009DFF23 /* 反转链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE25612A963915009DFF23 /* 反转链表.cpp */; };
		8EDE25642A964089009DFF23 /* 二叉树的镜像.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE25632A964089009DFF23 /* 二叉树的镜像.cpp */; };
		8EDE25682A978500009DFF23 /* 全排列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE25672A978500009DFF23 /* 全排列.cpp */; };
		8EDE256A2A9CB583009DFF23 /* 删除有序数组中的重复项.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE25692A9CB583009DFF23 /* 删除有序数组中的重复项.cpp */; };
		8EDE256C2AA092A8009DFF23 /* 两个数组的交集.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8EDE256B2AA092A8009DFF23 /* 两个数组的交集.cpp */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		8EE9BA632A1B83EC00D6DC7C /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		8E057F922A4BD65700EBA6F9 /* 和为s的连续正数序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "和为s的连续正数序列.cpp"; sourceTree = "<group>"; };
		8E1131ED2A85E75B0091FCD1 /* 背包问题.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "背包问题.cpp"; sourceTree = "<group>"; };
		8E17E2F42A5E558F0095BDBC /* 斐波那契数列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "斐波那契数列.cpp"; sourceTree = "<group>"; };
		8E17E2F62A5F9DAC0095BDBC /* 青蛙跳台阶问题.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "青蛙跳台阶问题.cpp"; sourceTree = "<group>"; };
		8E17E2F82A5FA2D30095BDBC /* 股票的最大利润.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "股票的最大利润.cpp"; sourceTree = "<group>"; };
		8E17E2FA2A60237B0095BDBC /* 连续子数组的最大和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "连续子数组的最大和.cpp"; sourceTree = "<group>"; };
		8E17E30D2A6782400095BDBC /* 汽水瓶.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "汽水瓶.cpp"; sourceTree = "<group>"; };
		8E17E30F2A678FAD0095BDBC /* 明明的随机数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "明明的随机数.cpp"; sourceTree = "<group>"; };
		8E17E3112A67BBB00095BDBC /* 进制转换.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "进制转换.cpp"; sourceTree = "<group>"; };
		8E19E3042AD69D70006C35A8 /* 归并排序算法.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "归并排序算法.cpp"; sourceTree = "<group>"; };
		8E262E3B2A77AC0D006033B5 /* 礼物的最大价值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "礼物的最大价值.cpp"; sourceTree = "<group>"; };
		8E262E412A78D90F006033B5 /* 把数字翻译成字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "把数字翻译成字符串.cpp"; sourceTree = "<group>"; };
		8E262E432A78E9D0006033B5 /* 最长不含重复字符的子字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "最长不含重复字符的子字符串.cpp"; sourceTree = "<group>"; };
		8E262E452A790468006033B5 /* 正则表达式匹配.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "正则表达式匹配.cpp"; sourceTree = "<group>"; };
		8E262E472A7905B6006033B5 /* 丑数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "丑数.cpp"; sourceTree = "<group>"; };
		8E262E492A790C1C006033B5 /* n个骰子的点数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "n个骰子的点数.cpp"; sourceTree = "<group>"; };
		8E262E6B2A7A64F8006033B5 /* 数组中数字出现的次数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "数组中数字出现的次数.cpp"; sourceTree = "<group>"; };
		8E262E6D2A7A650C006033B5 /* 数组中数字出现的次数 II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "数组中数字出现的次数 II.cpp"; sourceTree = "<group>"; };
		8E262E712A7B9D58006033B5 /* 构建乘积数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "构建乘积数组.cpp"; sourceTree = "<group>"; };
		8E262E732A7B9D96006033B5 /* 剪绳子.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剪绳子.cpp"; sourceTree = "<group>"; };
		8E262E752A7C895E006033B5 /* 剪绳子 II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剪绳子 II.cpp"; sourceTree = "<group>"; };
		8E262E772A7C99F2006033B5 /* 圆圈中最后剩下的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "圆圈中最后剩下的数字.cpp"; sourceTree = "<group>"; };
		8E262E7A2A7CD64C006033B5 /* 1～n 整数中 1 出现的次数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1～n 整数中 1 出现的次数.cpp"; sourceTree = "<group>"; };
		8E262E7C2A7CD705006033B5 /* 数字序列中某一位的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "数字序列中某一位的数字.cpp"; sourceTree = "<group>"; };
		8E2676542AD68660003EF053 /* 快速排序算法.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "快速排序算法.cpp"; sourceTree = "<group>"; };
		8E2676562AD68C68003EF053 /* 堆排序算法.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "堆排序算法.cpp"; sourceTree = "<group>"; };
		8E28F1502AD6779D007C2522 /* 字符串转换为整数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "字符串转换为整数.cpp"; sourceTree = "<group>"; };
		8E2D1EEF2A5962AA0061F6B7 /* 不用加减乘除做加法.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "不用加减乘除做加法.cpp"; sourceTree = "<group>"; };
		8E2D1EF12A5B93700061F6B7 /* 二进制中1的个数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "二进制中1的个数.cpp"; sourceTree = "<group>"; };
		8E2D1EF32A5B990A0061F6B7 /* 数组中出现次数超过一半的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "数组中出现次数超过一半的数字.cpp"; sourceTree = "<group>"; };
		8E3CFA602AB9D299003BA092 /* 用两个栈实现队列.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "用两个栈实现队列.cpp"; sourceTree = "<group>"; };
		8E3CFA612AB9D299003BA092 /* 第一个只出现一次的字符.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "第一个只出现一次的字符.cpp"; sourceTree = "<group>"; };
		8E3CFA622AB9D299003BA092 /* 调整数组顺序使奇数位于偶数前面.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "调整数组顺序使奇数位于偶数前面.cpp"; sourceTree = "<group>"; };
		8E3CFA632AB9D299003BA092 /* 0～n-1中缺失的数字.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "0～n-1中缺失的数字.cpp"; sourceTree = "<group>"; };
		8E3CFA642AB9D299003BA092 /* 队列的最大值.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "队列的最大值.cpp"; sourceTree = "<group>"; };
		8E3CFA652AB9D299003BA092 /* 矩阵中的路径.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "矩阵中的路径.cpp"; sourceTree = "<group>"; };
		8E3CFA662AB9D299003BA092 /* 翻转单词顺序.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "翻转单词顺序.cpp"; sourceTree = "<group>"; };
		8E3CFA672AB9D299003BA092 /* 链表中倒数第k个节点.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "链表中倒数第k个节点.cpp"; sourceTree = "<group>"; };
		8E3CFA682AB9D299003BA092 /* 重建二叉树.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "重建二叉树.cpp"; sourceTree = "<group>"; };
		8E3CFA692AB9D299003BA092 /* 表示数值的字符串.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "表示数值的字符串.cpp"; sourceTree = "<group>"; };
		8E3CFA6A2AB9D299003BA092 /* 顺时针打印矩阵.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "顺时针打印矩阵.cpp"; sourceTree = "<group>"; };
		8E3CFA822AB9D393003BA092 /* 把字符串转换成整数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "把字符串转换成整数.cpp"; sourceTree = "<group>"; };
		8E3CFA862AB9DC65003BA092 /* 合并两个链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "合并两个链表.cpp"; sourceTree = "<group>"; };
		8E3CFA882ABABE68003BA092 /* 把数组排成最小的数.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "把数组排成最小的数.cpp"; sourceTree = "<group>"; };
		8E3CFA892ABABE68003BA092 /* 序列化二叉树.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "序列化二叉树.cpp"; sourceTree = "<group>"; };
		8E3CFA8A2ABABE68003BA092 /* 平衡二叉树.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "平衡二叉树.cpp"; sourceTree = "<group>"; };
		8E3CFA8B2ABABE68003BA092 /* 打印从1到最大的n位数.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "打印从1到最大的n位数.cpp"; sourceTree = "<group>"; };
		8E3CFA8C2ABABE68003BA092 /* 对称的二叉树.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "对称的二叉树.cpp"; sourceTree = "<group>"; };
		8E3CFA8D2ABABE68003BA092 /* 求1+2+…+n.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "求1+2+…+n.cpp"; sourceTree = "<group>"; };
		8E3CFA8E2ABABE68003BA092 /* 替换空格.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "替换空格.cpp"; sourceTree = "<group>"; };
		8E3CFA8F2ABABE68003BA092 /* 滑动窗口的最大值.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "滑动窗口的最大值.cpp"; sourceTree = "<group>"; };
		8E3CFA902ABABE68003BA092 /* 数值的整数次方.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "数值的整数次方.cpp"; sourceTree = "<group>"; };
		8E3CFA912ABABE68003BA092 /* 在排序数组中查找数字I.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "在排序数组中查找数字I.cpp"; sourceTree = "<group>"; };
		8E3CFA932ABABE68003BA092 /* 栈的压入、弹出序列.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "栈的压入、弹出序列.cpp"; sourceTree = "<group>"; };
		8E3CFA942ABABE68003BA092 /* 复杂链表的复制.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "复杂链表的复制.cpp"; sourceTree = "<group>"; };
		8E3CFA952ABABE68003BA092 /* 数组中重复的数字.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "数组中重复的数字.cpp"; sourceTree = "<group>"; };
		8E3CFA962ABABE68003BA092 /* 旋转数组的最小数字.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "旋转数组的最小数字.cpp"; sourceTree = "<group>"; };
		8E3CFA972ABABE68003BA092 /* 机器人的运动范围.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "机器人的运动范围.cpp"; sourceTree = "<group>"; };
		8E3CFA982ABABE68003BA092 /* 数据流中的中位数.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "数据流中的中位数.cpp"; sourceTree = "<group>"; };
		8E3CFA992ABABE68003BA092 /* 左旋转字符串.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "左旋转字符串.cpp"; sourceTree = "<group>"; };
		8E3CFA9A2ABABE68003BA092 /* 树的子结构.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "树的子结构.cpp"; sourceTree = "<group>"; };
		8E3CFA9B2ABABE68003BA092 /* 字符串的排列.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "字符串的排列.cpp"; sourceTree = "<group>"; };
		8E3CFA9C2ABABE68003BA092 /* 数组中的逆序对.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "数组中的逆序对.cpp"; sourceTree = "<group>"; };
		8E3CFA9D2ABABE68003BA092 /* 扑克牌中的顺子.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "扑克牌中的顺子.cpp"; sourceTree = "<group>"; };
		8E3CFAB42ABABF13003BA092 /* 二叉树的完全性检验.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "二叉树的完全性检验.cpp"; sourceTree = "<group>"; };
		8E5F79572AFB82830008549C /* 比较版本号.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "比较版本号.cpp"; sourceTree = "<group>"; };
		8E9258602AE8E3DE003C4FB6 /* 判断数组无重复.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "判断数组无重复.cpp"; sourceTree = "<group>"; };
		8EDE25532A8F9824009DFF23 /* 小红的日常分享.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "小红的日常分享.cpp"; sourceTree = "<group>"; };
		8EDE25552A9354D7009DFF23 /* 两个链表的第一个公共节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "两个链表的第一个公共节点.cpp"; sourceTree = "<group>"; };
		8EDE25572A935D38009DFF23 /* 二叉树的最近公共节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "二叉树的最近公共节点.cpp"; sourceTree = "<group>"; };
		8EDE25592A95E72F009DFF23 /* 合并两个排序的链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "合并两个排序的链表.cpp"; sourceTree = "<group>"; };
		8EDE255B2A95F110009DFF23 /* 二叉树的层序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "二叉树的层序遍历.cpp"; sourceTree = "<group>"; };
		8EDE255D2A9603D5009DFF23 /* 环形链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "环形链表.cpp"; sourceTree = "<group>"; };
		8EDE255F2A962941009DFF23 /* 最长不含重复字符的子字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "最长不含重复字符的子字符串.cpp"; sourceTree = "<group>"; };
		8EDE25612A963915009DFF23 /* 反转链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "反转链表.cpp"; sourceTree = "<group>"; };
		8EDE25632A964089009DFF23 /* 二叉树的镜像.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "二叉树的镜像.cpp"; sourceTree = "<group>"; };
		8EDE25672A978500009DFF23 /* 全排列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "全排列.cpp"; sourceTree = "<group>"; };
		8EDE25692A9CB583009DFF23 /* 删除有序数组中的重复项.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "删除有序数组中的重复项.cpp"; sourceTree = "<group>"; };
		8EDE256B2AA092A8009DFF23 /* 两个数组的交集.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "两个数组的交集.cpp"; sourceTree = "<group>"; };
		8EE9BA652A1B83EC00D6DC7C /* leetcode */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = leetcode; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		8EE9BA622A1B83EC00D6DC7C /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		8E17E30B2A6782030095BDBC /* nknet */ = {
			isa = PBXGroup;
			children = (
				8E17E30D2A6782400095BDBC /* 汽水瓶.cpp */,
				8E17E30F2A678FAD0095BDBC /* 明明的随机数.cpp */,
				8E17E3112A67BBB00095BDBC /* 进制转换.cpp */,
				8E1131ED2A85E75B0091FCD1 /* 背包问题.cpp */,
				8EDE25532A8F9824009DFF23 /* 小红的日常分享.cpp */,
				8EDE25552A9354D7009DFF23 /* 两个链表的第一个公共节点.cpp */,
				8EDE25572A935D38009DFF23 /* 二叉树的最近公共节点.cpp */,
				8EDE25592A95E72F009DFF23 /* 合并两个排序的链表.cpp */,
				8EDE255B2A95F110009DFF23 /* 二叉树的层序遍历.cpp */,
				8EDE255D2A9603D5009DFF23 /* 环形链表.cpp */,
				8EDE255F2A962941009DFF23 /* 最长不含重复字符的子字符串.cpp */,
				8EDE25612A963915009DFF23 /* 反转链表.cpp */,
				8EDE25632A964089009DFF23 /* 二叉树的镜像.cpp */,
				8EDE25672A978500009DFF23 /* 全排列.cpp */,
				8EDE25692A9CB583009DFF23 /* 删除有序数组中的重复项.cpp */,
				8EDE256B2AA092A8009DFF23 /* 两个数组的交集.cpp */,
				8E2676562AD68C68003EF053 /* 堆排序算法.cpp */,
				8E3CFA862AB9DC65003BA092 /* 合并两个链表.cpp */,
				8E3CFAB42ABABF13003BA092 /* 二叉树的完全性检验.cpp */,
				8E28F1502AD6779D007C2522 /* 字符串转换为整数.cpp */,
				8E2676542AD68660003EF053 /* 快速排序算法.cpp */,
				8E19E3042AD69D70006C35A8 /* 归并排序算法.cpp */,
				8E9258602AE8E3DE003C4FB6 /* 判断数组无重复.cpp */,
				8E5F79572AFB82830008549C /* 比较版本号.cpp */,
			);
			path = nknet;
			sourceTree = "<group>";
		};
		8EE9BA5C2A1B83EC00D6DC7C = {
			isa = PBXGroup;
			children = (
				8E17E30B2A6782030095BDBC /* nknet */,
				8EE9BA672A1B83EC00D6DC7C /* leetco */,
				8EE9BA662A1B83EC00D6DC7C /* Products */,
			);
			sourceTree = "<group>";
		};
		8EE9BA662A1B83EC00D6DC7C /* Products */ = {
			isa = PBXGroup;
			children = (
				8EE9BA652A1B83EC00D6DC7C /* leetcode */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		8EE9BA672A1B83EC00D6DC7C /* leetco */ = {
			isa = PBXGroup;
			children = (
				8E3CFA912ABABE68003BA092 /* 在排序数组中查找数字I.cpp */,
				8E3CFA942ABABE68003BA092 /* 复杂链表的复制.cpp */,
				8E3CFA9B2ABABE68003BA092 /* 字符串的排列.cpp */,
				8E3CFA8C2ABABE68003BA092 /* 对称的二叉树.cpp */,
				8E3CFA992ABABE68003BA092 /* 左旋转字符串.cpp */,
				8E3CFA8A2ABABE68003BA092 /* 平衡二叉树.cpp */,
				8E3CFA892ABABE68003BA092 /* 序列化二叉树.cpp */,
				8E3CFA9D2ABABE68003BA092 /* 扑克牌中的顺子.cpp */,
				8E3CFA8B2ABABE68003BA092 /* 打印从1到最大的n位数.cpp */,
				8E3CFA882ABABE68003BA092 /* 把数组排成最小的数.cpp */,
				8E3CFA902ABABE68003BA092 /* 数值的整数次方.cpp */,
				8E3CFA982ABABE68003BA092 /* 数据流中的中位数.cpp */,
				8E3CFA9C2ABABE68003BA092 /* 数组中的逆序对.cpp */,
				8E3CFA952ABABE68003BA092 /* 数组中重复的数字.cpp */,
				8E3CFA962ABABE68003BA092 /* 旋转数组的最小数字.cpp */,
				8E3CFA8E2ABABE68003BA092 /* 替换空格.cpp */,
				8E3CFA972ABABE68003BA092 /* 机器人的运动范围.cpp */,
				8E3CFA932ABABE68003BA092 /* 栈的压入、弹出序列.cpp */,
				8E3CFA9A2ABABE68003BA092 /* 树的子结构.cpp */,
				8E3CFA8D2ABABE68003BA092 /* 求1+2+…+n.cpp */,
				8E3CFA8F2ABABE68003BA092 /* 滑动窗口的最大值.cpp */,
				8E3CFA632AB9D299003BA092 /* 0～n-1中缺失的数字.cpp */,
				8E3CFA602AB9D299003BA092 /* 用两个栈实现队列.cpp */,
				8E3CFA652AB9D299003BA092 /* 矩阵中的路径.cpp */,
				8E3CFA612AB9D299003BA092 /* 第一个只出现一次的字符.cpp */,
				8E3CFA662AB9D299003BA092 /* 翻转单词顺序.cpp */,
				8E3CFA692AB9D299003BA092 /* 表示数值的字符串.cpp */,
				8E3CFA622AB9D299003BA092 /* 调整数组顺序使奇数位于偶数前面.cpp */,
				8E3CFA682AB9D299003BA092 /* 重建二叉树.cpp */,
				8E3CFA672AB9D299003BA092 /* 链表中倒数第k个节点.cpp */,
				8E3CFA642AB9D299003BA092 /* 队列的最大值.cpp */,
				8E3CFA6A2AB9D299003BA092 /* 顺时针打印矩阵.cpp */,
				8E17E2F42A5E558F0095BDBC /* 斐波那契数列.cpp */,
				8E17E2F62A5F9DAC0095BDBC /* 青蛙跳台阶问题.cpp */,
				8E17E2F82A5FA2D30095BDBC /* 股票的最大利润.cpp */,
				8E17E2FA2A60237B0095BDBC /* 连续子数组的最大和.cpp */,
				8E262E3B2A77AC0D006033B5 /* 礼物的最大价值.cpp */,
				8E262E412A78D90F006033B5 /* 把数字翻译成字符串.cpp */,
				8E262E432A78E9D0006033B5 /* 最长不含重复字符的子字符串.cpp */,
				8E262E452A790468006033B5 /* 正则表达式匹配.cpp */,
				8E262E472A7905B6006033B5 /* 丑数.cpp */,
				8E2D1EF32A5B990A0061F6B7 /* 数组中出现次数超过一半的数字.cpp */,
				8E262E712A7B9D58006033B5 /* 构建乘积数组.cpp */,
				8E262E732A7B9D96006033B5 /* 剪绳子.cpp */,
				8E262E752A7C895E006033B5 /* 剪绳子 II.cpp */,
				8E057F922A4BD65700EBA6F9 /* 和为s的连续正数序列.cpp */,
				8E262E772A7C99F2006033B5 /* 圆圈中最后剩下的数字.cpp */,
				8E262E7A2A7CD64C006033B5 /* 1～n 整数中 1 出现的次数.cpp */,
				8E262E7C2A7CD705006033B5 /* 数字序列中某一位的数字.cpp */,
				8E262E492A790C1C006033B5 /* n个骰子的点数.cpp */,
				8E2D1EF12A5B93700061F6B7 /* 二进制中1的个数.cpp */,
				8E2D1EEF2A5962AA0061F6B7 /* 不用加减乘除做加法.cpp */,
				8E262E6B2A7A64F8006033B5 /* 数组中数字出现的次数.cpp */,
				8E262E6D2A7A650C006033B5 /* 数组中数字出现的次数 II.cpp */,
				8E3CFA822AB9D393003BA092 /* 把字符串转换成整数.cpp */,
			);
			path = leetco;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		8EE9BA642A1B83EC00D6DC7C /* leetcode */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 8EE9BA6C2A1B83EC00D6DC7C /* Build configuration list for PBXNativeTarget "leetcode" */;
			buildPhases = (
				8EE9BA612A1B83EC00D6DC7C /* Sources */,
				8EE9BA622A1B83EC00D6DC7C /* Frameworks */,
				8EE9BA632A1B83EC00D6DC7C /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = leetcode;
			productName = leetcode;
			productReference = 8EE9BA652A1B83EC00D6DC7C /* leetcode */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		8EE9BA5D2A1B83EC00D6DC7C /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastUpgradeCheck = 1430;
				TargetAttributes = {
					8EE9BA642A1B83EC00D6DC7C = {
						CreatedOnToolsVersion = 14.3;
					};
				};
			};
			buildConfigurationList = 8EE9BA602A1B83EC00D6DC7C /* Build configuration list for PBXProject "leetcode" */;
			compatibilityVersion = "Xcode 14.0";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 8EE9BA5C2A1B83EC00D6DC7C;
			productRefGroup = 8EE9BA662A1B83EC00D6DC7C /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				8EE9BA642A1B83EC00D6DC7C /* leetcode */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		8EE9BA612A1B83EC00D6DC7C /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				8E3CFA6D2AB9D299003BA092 /* 调整数组顺序使奇数位于偶数前面.cpp in Sources */,
				8E3CFAA32ABABE68003BA092 /* 求1+2+…+n.cpp in Sources */,
				8EDE25492A8F8C52009DFF23 /* 斐波那契数列.cpp in Sources */,
				8E3CFAA72ABABE68003BA092 /* 在排序数组中查找数字I.cpp in Sources */,
				8EDE254A2A8F8C52009DFF23 /* 青蛙跳台阶问题.cpp in Sources */,
				8E3CFA732AB9D299003BA092 /* 重建二叉树.cpp in Sources */,
				8E3CFA7A2AB9D2AE003BA092 /* 数组中出现次数超过一半的数字.cpp in Sources */,
				8E3CFA7D2AB9D2AE003BA092 /* 剪绳子.cpp in Sources */,
				8E3CFAAD2ABABE68003BA092 /* 机器人的运动范围.cpp in Sources */,
				8E3CFA792AB9D2AE003BA092 /* 和为s的连续正数序列.cpp in Sources */,
				8EDE256A2A9CB583009DFF23 /* 删除有序数组中的重复项.cpp in Sources */,
				8EDE256C2AA092A8009DFF23 /* 两个数组的交集.cpp in Sources */,
				8E3CFA6C2AB9D299003BA092 /* 第一个只出现一次的字符.cpp in Sources */,
				8E3CFA742AB9D299003BA092 /* 表示数值的字符串.cpp in Sources */,
				8EDE255E2A9603D5009DFF23 /* 环形链表.cpp in Sources */,
				8EDE25602A962941009DFF23 /* 最长不含重复字符的子字符串.cpp in Sources */,
				8E2676572AD68C68003EF053 /* 堆排序算法.cpp in Sources */,
				8EDE25542A8F9824009DFF23 /* 小红的日常分享.cpp in Sources */,
				8EDE254B2A8F8C52009DFF23 /* 股票的最大利润.cpp in Sources */,
				8E3CFA7E2AB9D2B4003BA092 /* 不用加减乘除做加法.cpp in Sources */,
				8EDE25682A978500009DFF23 /* 全排列.cpp in Sources */,
				8E9258612AE8E3DE003C4FB6 /* 判断数组无重复.cpp in Sources */,
				8EDE254C2A8F8C52009DFF23 /* 连续子数组的最大和.cpp in Sources */,
				8E3CFAA92ABABE68003BA092 /* 栈的压入、弹出序列.cpp in Sources */,
				8EDE254D2A8F8C52009DFF23 /* 礼物的最大价值.cpp in Sources */,
				8E3CFA832AB9D393003BA092 /* 把字符串转换成整数.cpp in Sources */,
				8EDE25642A964089009DFF23 /* 二叉树的镜像.cpp in Sources */,
				8E3CFAB52ABABF13003BA092 /* 二叉树的完全性检验.cpp in Sources */,
				8EDE254E2A8F8C52009DFF23 /* 把数字翻译成字符串.cpp in Sources */,
				8E3CFAB02ABABE68003BA092 /* 树的子结构.cpp in Sources */,
				8EDE255A2A95E72F009DFF23 /* 合并两个排序的链表.cpp in Sources */,
				8E3CFA812AB9D2B4003BA092 /* 数组中数字出现的次数 II.cpp in Sources */,
				8E3CFA6B2AB9D299003BA092 /* 用两个栈实现队列.cpp in Sources */,
				8EDE25562A9354D7009DFF23 /* 两个链表的第一个公共节点.cpp in Sources */,
				8E3CFAA22ABABE68003BA092 /* 对称的二叉树.cpp in Sources */,
				8E19E3052AD69D70006C35A8 /* 归并排序算法.cpp in Sources */,
				8E3CFA7B2AB9D2AE003BA092 /* 圆圈中最后剩下的数字.cpp in Sources */,
				8EDE254F2A8F8C52009DFF23 /* 最长不含重复字符的子字符串.cpp in Sources */,
				8E3CFAA52ABABE68003BA092 /* 滑动窗口的最大值.cpp in Sources */,
				8E3CFA6E2AB9D299003BA092 /* 0～n-1中缺失的数字.cpp in Sources */,
				8E2676552AD68660003EF053 /* 快速排序算法.cpp in Sources */,
				8E3CFAA42ABABE68003BA092 /* 替换空格.cpp in Sources */,
				8EDE255C2A95F110009DFF23 /* 二叉树的层序遍历.cpp in Sources */,
				8EDE25502A8F8C52009DFF23 /* 正则表达式匹配.cpp in Sources */,
				8E5F79582AFB82830008549C /* 比较版本号.cpp in Sources */,
				8EDE25512A8F8C52009DFF23 /* 丑数.cpp in Sources */,
				8E3CFA702AB9D299003BA092 /* 矩阵中的路径.cpp in Sources */,
				8E3CFA802AB9D2B4003BA092 /* 二进制中1的个数.cpp in Sources */,
				8E3CFA722AB9D299003BA092 /* 链表中倒数第k个节点.cpp in Sources */,
				8E3CFA782AB9D2AE003BA092 /* 数字序列中某一位的数字.cpp in Sources */,
				8E3CFA6F2AB9D299003BA092 /* 队列的最大值.cpp in Sources */,
				8E3CFA9E2ABABE68003BA092 /* 把数组排成最小的数.cpp in Sources */,
				8E3CFAB12ABABE68003BA092 /* 字符串的排列.cpp in Sources */,
				8E3CFA752AB9D299003BA092 /* 顺时针打印矩阵.cpp in Sources */,
				8E3CFAAF2ABABE68003BA092 /* 左旋转字符串.cpp in Sources */,
				8EDE25522A8F8C52009DFF23 /* n个骰子的点数.cpp in Sources */,
				8E3CFAAB2ABABE68003BA092 /* 数组中重复的数字.cpp in Sources */,
				8E1131EE2A85E78C0091FCD1 /* 汽水瓶.cpp in Sources */,
				8E3CFAB32ABABE68003BA092 /* 扑克牌中的顺子.cpp in Sources */,
				8E3CFA7F2AB9D2B4003BA092 /* 数组中数字出现的次数.cpp in Sources */,
				8E3CFA7C2AB9D2AE003BA092 /* 构建乘积数组.cpp in Sources */,
				8E1131EF2A85E78C0091FCD1 /* 明明的随机数.cpp in Sources */,
				8EDE25622A963915009DFF23 /* 反转链表.cpp in Sources */,
				8E3CFA772AB9D2AE003BA092 /* 剪绳子 II.cpp in Sources */,
				8E28F1512AD6779D007C2522 /* 字符串转换为整数.cpp in Sources */,
				8E3CFAAC2ABABE68003BA092 /* 旋转数组的最小数字.cpp in Sources */,
				8E3CFAB22ABABE68003BA092 /* 数组中的逆序对.cpp in Sources */,
				8E1131F02A85E78C0091FCD1 /* 进制转换.cpp in Sources */,
				8E3CFAAA2ABABE68003BA092 /* 复杂链表的复制.cpp in Sources */,
				8E3CFAA12ABABE68003BA092 /* 打印从1到最大的n位数.cpp in Sources */,
				8E3CFAAE2ABABE68003BA092 /* 数据流中的中位数.cpp in Sources */,
				8E3CFA762AB9D2AE003BA092 /* 1～n 整数中 1 出现的次数.cpp in Sources */,
				8E3CFA712AB9D299003BA092 /* 翻转单词顺序.cpp in Sources */,
				8E3CFA872AB9DC65003BA092 /* 合并两个链表.cpp in Sources */,
				8E3CFAA02ABABE68003BA092 /* 平衡二叉树.cpp in Sources */,
				8E3CFA9F2ABABE68003BA092 /* 序列化二叉树.cpp in Sources */,
				8EDE25582A935D38009DFF23 /* 二叉树的最近公共节点.cpp in Sources */,
				8E3CFAA62ABABE68003BA092 /* 数值的整数次方.cpp in Sources */,
				8E1131F12A85E78C0091FCD1 /* 背包问题.cpp in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		8EE9BA6A2A1B83EC00D6DC7C /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 13.0;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
			};
			name = Debug;
		};
		8EE9BA6B2A1B83EC00D6DC7C /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 13.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
			};
			name = Release;
		};
		8EE9BA6D2A1B83EC00D6DC7C /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		8EE9BA6E2A1B83EC00D6DC7C /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		8EE9BA602A1B83EC00D6DC7C /* Build configuration list for PBXProject "leetcode" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				8EE9BA6A2A1B83EC00D6DC7C /* Debug */,
				8EE9BA6B2A1B83EC00D6DC7C /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		8EE9BA6C2A1B83EC00D6DC7C /* Build configuration list for PBXNativeTarget "leetcode" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				8EE9BA6D2A1B83EC00D6DC7C /* Debug */,
				8EE9BA6E2A1B83EC00D6DC7C /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 8EE9BA5D2A1B83EC00D6DC7C /* Project object */;
}
